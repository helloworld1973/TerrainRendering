#version 400

layout(vertices = 4) out;

uniform int minTessLevel;
uniform int maxTessLevel;
uniform int vertexBufferStride;
uniform int heightScale;
uniform float gridSize;
uniform sampler2D heightMap;
uniform vec4 cameraCoordinate;


float distanceTL(float distance)
{
	float distanceMin= 20-heightScale;//20-12=8
	float distanceMax=gridSize;//sqrt(2*(gridSize)*(gridSize)+cameraCoordinate[1]*cameraCoordinate[1]); ; 	
	float tessLevel = ((distance - distanceMin) / (distanceMax-distanceMin)) * (minTessLevel - maxTessLevel) + maxTessLevel;
	return tessLevel;
}//algorithm 1 using the distance from camera vector to a patch 

float slopeDifferentValue(float x, float z, float x2, float z2) 
{
	float differentValue=abs((texture(heightMap, vec2(x, z)).r) - (texture(heightMap, vec2(x2, z2)).r)) ;
	return differentValue;
	//use texture() to sample the texture's color, first parameter is sampler,second parameter is texture coordinate
	//.rgba    .r means red color(height value)
}
float slopeTL(vec4 currentPositionPoint)
{
	  vec4 currentPosition=currentPositionPoint;
		if (currentPosition.x > vertexBufferStride && currentPosition.x < gridSize - vertexBufferStride && currentPosition.z < -vertexBufferStride && currentPosition.z > -gridSize + vertexBufferStride)
	{
		float upPosition = currentPosition.x - vertexBufferStride;
		float downPosition = currentPosition.x + vertexBufferStride;
		float rightPosition = currentPosition.z - vertexBufferStride;
		float leftPosition = currentPosition.z + vertexBufferStride;

		float maxDifferentValue = max(slopeDifferentValue(currentPosition.x, currentPosition.z, upPosition, currentPosition.z), slopeDifferentValue(currentPosition.x, currentPosition.z, downPosition, currentPosition.z));
		maxDifferentValue = max(slopeDifferentValue(currentPosition.x, currentPosition.z, currentPosition.x, rightPosition), maxDifferentValue);
		maxDifferentValue = max(slopeDifferentValue(currentPosition.x, currentPosition.z, currentPosition.x, leftPosition), maxDifferentValue);
		maxDifferentValue = maxDifferentValue * maxTessLevel;

		return maxDifferentValue;
	}	
}


void main()
{
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;//pass through patches 
	
	float tessLevel = minTessLevel;

  //TL distance
	float distance = abs(distance(gl_in[gl_InvocationID].gl_Position, cameraCoordinate));//the distance between point A and B
  float TlDiatance = distanceTL(distance);

  //TL slope
  vec4 currentPosition = gl_in[gl_InvocationID].gl_Position;//get current vertex
  float TlSlope = slopeTL(currentPosition);

  tessLevel=0.5*TlDiatance+0.5*TlSlope;// weight combination


	gl_TessLevelOuter[0] = tessLevel;
	gl_TessLevelOuter[1] = tessLevel;
	gl_TessLevelOuter[2] = tessLevel;
	gl_TessLevelOuter[3] = tessLevel;
	gl_TessLevelInner[0] = tessLevel;
	gl_TessLevelInner[1] = tessLevel;
}



